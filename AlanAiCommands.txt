// Use this sample to create your own voice commands
var cartHistory = [];


intent('hello world', p => {
    p.play('(hello|hi there)');
    p.play({command:'testing'})
});

intent('(Show me| what are) (some|) treding products',p=>{
    p.play('Sure');
    p.play({command:'trending_products'});
    p.play('Here are some trending products');
})

intent('(Go|) back ', p=> {
    p.play('(Sure| Going back)');
    p.play({command:'go_back'});
})

projectAPI.setClientData = function(p, param, callback) {
 
   p.play("called ");

  if(typeof(param.data) !== undefined)
    p.play(`pushing ${param.data}`)
  
  cartHistory.push(param.data);
  callback();
};

// intent("Check cart History",p => {
//     
//     p.play(`len of visual state ${p.visual.value}`)
//     console.log(`visual state value is ${p.visual.value}`)
//     
//     p.play(`${cartHistory.length}`)
//     
//     console.log("from alan ",cartHistory)
//     
//     for(var i = 0 ; i  < cartHistory.length; i++)
//         {
//             cartHistory[i].map((item) => {
//                 p.play(`Item name is ${item.name}`)
//             })
//         }
// })


const quantityContext = context(()=>{
     
   follow("$(QUANTITY NUMBER)",p => {
       p.play( {command:'add-item',quantity: p.QUANTITY.number, id: p.state.id} )
       p.resolve()
   })
   fallback("Please state how many items you want to add")
})

intent("Add (Item|Product) ID $(NUMBER) to cart",p=>{
    
    if( (p.NUMBER.value >=101 && p.NUMBER.value <=108) || (p.NUMBER.value >= 201 && p.NUMBER.value <= 208) )
        {
            p.play("How many would you like to add ?");
            p.then(quantityContext,{state: {id: p.NUMBER.value}});
        }
    else
        {
          p.play("No such item ID exist");
        }
})

intent("Remove (Item|Product) ID $(NUMBER) from the cart",p=>{
    if( (p.NUMBER.value >=101 && p.NUMBER.value <=108) || (p.NUMBER.value >= 201 && p.NUMBER.value <= 208) )
        {
             p.play({command:'remove-item',id:p.NUMBER.value})
        }
    else{
        p.play("No such item ID exist");
    }
})



intent("(Show|Open) cart ",p=>{
    p.play({command:'open-cart'});
})

intent("(Close|Remove) cart ",p => {
    p.play({command:'close-cart'});
})

const itemNameSlot = `$(ITEM_NAME Car|Casual Shoes|Shoes|Guitar|Hair Oil|Speaker
|JBL Speaker|Nike Shows|Samsung S10|Back Cushion|Bluetooth Speaker
|Book Ends|Iphone 13|Neck Messager|Smart Watch|Temporary Tatoo
|Vegetable Chopper|oil)`;


intent(`Search for ${itemNameSlot} `,p=>{
    p.play({command:'search',value:p.ITEM_NAME.value})
})

intent('search for ',p=>{
    p.play("sorry couldn't find");
})

let checkout = context(() => {
    intent('(My adress is|It is|) $(LOC)',p => {
        p.play({command:'checkout',value:p.LOC.value});
    })
})

intent('(Checkout|Order Items|Place Order)',p=>{
    p.play('What is the delivery address?');
    p.then(checkout);
})


intent("(I want to give|) feedback for product (id|) $(NUMBER)", async p => {
    
     var ordered = false;
     const id = p.NUMBER.value.toString();
    
     for(var i = 0 ;  i  < cartHistory.length; i++)
         {
             cartHistory[i].map((item) => {
                 if(item.id === id)
                      ordered = true;
             })
         }
     
     if(!ordered)
        p.play("You can't give feedback on products you haven't bought.")
     
    else
       {
         p.play(" What do you think about our product?");
         const feedback = await p.then(userInput);
         p.play({command: "feedback", value: feedback.value, id: p.NUMBER.value});
         p.play("Thanks for your feedback");
       }        
 
});


intent("(I want to give|) feedback for a product",p => {
    p.play("please state the product ID");
});

const issueSlotName = `$(ISSUE_NAME Payment Related|Payment|Payment Failure|Website|Website Design|Late Delivery| Delivery
                         |Issue Not Resolved)`

intent(`(I want to|) Submit Issues for ${issueSlotName}`, async p =>{

    
    if(p.ISSUE_NAME.value)
    {
        if(p.ISSUE_NAME.value.toLowerCase().includes("delivery"))
            {
                p.play("Your ordered Item has reached New Delhi. It will reach its destination in a day or two")
            }
        else if(p.ISSUE_NAME.value.toLowerCase().includes("payment"))
            {
                p.play("What's the issue that you are facing?")
                const feedback = await p.then(userInput)
                 p.play({command: "issue", value: feedback.value,category:"Delivery"});
                 p.play("Sorry for the problem we will look into it");
            }
        else if(p.ISSUE_NAME.value.toLowerCase().includes("website"))
            {
                p.play("Can you please be more specific about it")
                const feedback = await p.then(userInput)
                p.play({command:"issue",value:feedback.value,category:"Website"})
                p.play("We will forward your query")
            }
        else if(p.ISSUE_NAME.value.toLowerCase().includes("issue"))
            {
                p.play("What was your previous issue")
                const feedback = await p.then(userInput)
                p.play({command:"issue",value:feedback.value,category:"Issue Not Resolved"})
                p.play("Sorry for the Incovenience")
                p.play("You can directly call to customer services if you wist")
                p.play("The number is 88888888")
            }
    }
    else
        {
            p.play("Please elaborate the issue that you are facing")
            const feedback  = await p.then(userInput)
            p.play({command:"issues",value:feedback.value,category:"Not predefined"})
            p.play("Your issue has been registered")
        }
      
})

const userInput = context(() => {
    intent("$(I* .+)", p => p.resolve(p.I));
})